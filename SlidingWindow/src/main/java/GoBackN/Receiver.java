/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GoBackN;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.ArrayList;

class Ack implements Serializable {

    private static final long serialVersionUID = 7327232422313397792L;
    int frameNo;
    boolean status;

    Ack(int frameNo, boolean status) {
        this.frameNo = frameNo;
        this.status = status;
    }
}

public class Receiver {
    private int expectedIndex = 0, errorIndex = 0;
    private ArrayList<DataPacket> dataPackets = new ArrayList<DataPacket>();

    private void GoBackN(Socket socket) {
        ObjectInputStream input = null;
        try {
            DataPacket dataPacket = new DataPacket(0);
            input = new ObjectInputStream(socket.getInputStream());
            do {
                System.out.println("Discarding frame due to error\nWaiting for frame no" + errorIndex);
                dataPacket = (DataPacket) input.readObject();
            } while (dataPacket.frameno != errorIndex);
            dataPackets.add(dataPacket);
            errorIndex = 0;
            expectedIndex++;
        } catch (ClassNotFoundException e) {
            System.out.println("Object error in GoBackN");
        } catch (IOException e) {
            System.out.println("i/o error IN GoBackN");
        }
    }

    void displayFrame() {
        for (DataPacket d : this.dataPackets) {
            System.out.println(d.frameno + "|" + d.data);
        }
    }

    private void receive(Socket socket) {
        ObjectInputStream input = null;
        ObjectOutputStream output = null;
        try {
            input = new ObjectInputStream(socket.getInputStream());
            output = new ObjectOutputStream(socket.getOutputStream());
            while (true) {
                DataPacket dataPacket = (DataPacket) input.readObject();
                if (validate(dataPacket)) {
                    dataPackets.add(dataPacket);
                    sendAck(dataPacket.frameno, true, socket, output);
                    expectedIndex++;
                    if (expectedIndex == 10) {
                        expectedIndex = 0;
                        System.out.println("Received one frame");
                        System.out.println("Received frame is:");
                        displayFrame();
                    }
                } else {
                    sendAck(dataPacket.frameno, false, socket, output);
                    errorIndex = dataPacket.frameno;
                    GoBackN(socket);
                }
            }
        } catch (IOException e) {
            System.out.println("Error with establishing I/O");
        } catch (ClassNotFoundException e) {
            System.out.println("Error with sending objects");
        }
    }

    private boolean validate(DataPacket dataPacket) {
        return dataPacket.frameno == expectedIndex;
    }

    private void sendAck(int frameNo, boolean status, Socket socket, ObjectOutputStream output) {
        try {
            output.writeObject(new Ack(frameNo, status));
            System.out.println("ack sent for frame" + frameNo);
        } catch (IOException e) {
            System.out.println("IO Error in sending ack");
        }
    }

    public static void main(String[] args) {
        try {
            Socket socket = new Socket("localhost", 8080);
            Receiver receiver = new Receiver();
            receiver.receive(socket);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
